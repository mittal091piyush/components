COMPONENT

<aura:component >
    <!-- aura attributes -->
    <aura:attribute name="options" type="Object[]" />
    <aura:attribute name="selectedItems" type="String[]" />
    <aura:attribute name="infoText" type="String" default="Select an option..." />
    <aura:attribute name="label" type="String" default="" />
    <aura:attribute name="variant" type="String" default="" description="to hide label, add 'label-hidden' as a variant" />
    <aura:attribute name="width" type="String" default="240px;" />
    <aura:attribute name="dropdownLength" type="Integer" default="5" />
    <aura:attribute name="dropdownOver" type="Boolean" default="false" />
    <aura:attribute name="initialized" type="Boolean" default="false" />
    <aura:attribute name="options_" type="Object[]" />
    <aura:attribute name="helpText" type="String"/>
    <aura:attribute name="sorting" type="boolean" default="true"/>
    <!-- aura attributes -->
    
    <!-- aura events -->
    <aura:registerEvent name="onchange" type="c:genricMultiSelectEvt"/>
    <!-- aura events -->
    
    <!-- aura handlers -->
    <aura:handler name="init" value="{!this}" action="{!c.init}"/>
    <aura:handler name="change" value="{!v.options}" action="{!c.reInit}"/>
    <!-- aura handlers -->
    
    <!--<div class="slds-form-element" style="{!'width:' + v.width }">-->
    <div class="slds-form-element">
        <label class="{!if (v.variant == 'label-hidden' , 'slds-hide' , 'slds-form-element__label')}" for="combobox-id-1">{!v.label}</label>
        <aura:if isTrue="{!and(v.helpText, v.helpText != '')}">
            <lightning:helptext content="{!v.helpText}" />
        </aura:if>
        <div class="slds-form-element__control">
            <div class="slds-combobox_container">
                <div aura:id="main-div" class="slds-combobox slds-dropdown-trigger slds-dropdown-trigger_click" aria-expanded="false" aria-haspopup="listbox" role="combobox">
                    <div class="slds-combobox__form-element slds-input-has-icon slds-input-has-icon_right" role="none">
                        <input type="text" class="slds-input slds-combobox__input" id="combobox-id-1" aria-controls="listbox-id-1" autoComplete="off" role="textbox" placeholder="{!v.infoText}" readonly="true" onclick="{!c.handleClick}" onmouseleave="{!c.handleMouseOutButton}" />
                        
                        <span class="slds-icon_container slds-icon-utility-down slds-input__icon slds-input__icon_right">
                            <lightning:icon iconName="utility:down" size="x-small" class="slds-icon slds-icon slds-icon_x-small slds-icon-text-default" />
                        </span>
                    </div>
                    
                    <div class="{!'slds-dropdown  slds-dropdown_fluid slds-dropdown_length-5' + v.dropdownLength}" onmouseenter="{!c.handleMouseEnter}" onmouseleave="{!c.handleMouseLeave}" role="listbox">
                        <ul class="slds-listbox slds-listbox_vertical" role="presentation">
                            <aura:iteration items="{!v.options_}" var="option">
                                <li class="slds-listbox__item" role="presentation" onclick="{!c.handleSelection}" data-value="{!option.value}" data-selected="{!option.selected}">
                                    <div class="{!' slds-media  slds-listbox__option_plain slds-media_small slds-listbox__option ' + (option.selected == true ? ' slds-is-selected' : '')}" role="option">
                                        <span class="slds-media__figure">
                                            <lightning:icon iconName="utility:check" size="x-small" class="slds-icon-utility-check slds-current-color slds-listbox__icon-selected slds-icon_container" />
                                        </span>
                                        
                                        <span class="slds-media__body">
                                            <span class="slds-truncate" title="{!option.label}">&nbsp;{!option.label}</span>
                                        </span>
                                    </div>
                                </li>
                            </aura:iteration>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</aura:component>

CONTROLLER
//Controller
({
    reInit: function(component, event, helper) {
        component.set("v.initialized",false);
        helper.init(component);
    },
    
    init: function(component, event, helper) {
        helper.init(component);
    },
    
    handleClick: function(component, event, helper) {
        var mainDiv = component.find('main-div');
        $A.util.addClass(mainDiv, 'slds-is-open');
    },
    handleSelection: function(component, event, helper) {
        var item = event.currentTarget;
        if (item && item.dataset) {
            var value = item.dataset.value;
            var selected = item.dataset.selected;
            
            var options = component.get("v.options_");
            
            options.forEach(function(element) {
                if (element.value == value) {
                    element.selected = selected == "true" ? false : true;
                }
            });
            /*var mainDiv = component.find('main-div');
            $A.util.removeClass(mainDiv, 'slds-is-open');*/
            
            component.set("v.options_", options);
            var values = helper.getSelectedValues(component);
            var labels = helper.getSelectedLabels(component);
            
            helper.setInfoText(component, labels);
            helper.despatchSelectChangeEvent(component, values);
            
        }
    },
    
    handleMouseLeave: function(component, event, helper) {
        component.set("v.dropdownOver", false);
        var mainDiv = component.find('main-div');
        $A.util.removeClass(mainDiv, 'slds-is-open');
    },
    
    handleMouseEnter: function(component, event, helper) {
        component.set("v.dropdownOver", true);
    },
    
    handleMouseOutButton: function(component, event, helper) {
        window.setTimeout(
            $A.getCallback(function() {
                if (component.isValid()) {
                    //if dropdown over, user has hovered over the dropdown, so don't close.
                    if (component.get("v.dropdownOver")) {
                        return;
                    }
                    var mainDiv = component.find('main-div');
                    $A.util.removeClass(mainDiv, 'slds-is-open');
                }
            }), 200
        );
    }  
    
})

HELPER

({
    init: function(component) {
        
        //note, we get options and set options_
        //options_ is the private version and we use this from now on.
        //this is to allow us to sort the options array before rendering
        if (component.get("v.initialized")){
            return;
        }
        component.set("v.initialized",true);
        
        var options = component.get("v.options");
        if( component.get("v.sorting") ){
            options.sort(function compare(a, b) {
                if (a.value == 'All') {
                    return -1;
                } else if (a.value < b.value) {
                    return -1;
                }
                if (a.value > b.value) {
                    return 1;
                }
                return 0;
            });
        }
        component.set("v.options_", options);
        var labels = this.getSelectedLabels(component);
        this.setInfoText(component, labels);        
    },  
    
    setInfoText: function(component, values) {
        
        if (values.length == 0) {
            component.set("v.infoText", "All");
        }
        if (values.length == 1) {
            component.set("v.infoText", values[0]);
        }
        else if (values.length > 1) {
            component.set("v.infoText", values.length + " options selected");
        }
    },
    
    getSelectedValues: function(component){
        var options = component.get("v.options_");
        var values = [];
        options.forEach(function(element) {
            if (element.selected) {
                values.push(element.value);
            }
        });
        return values;
    },
    
    getSelectedLabels: function(component){
        var options = component.get("v.options_");
        var labels = [];
        options.forEach(function(element) {
            if (element.selected) {
                labels.push(element.label);
            }
        });
        return labels;
    },
    
    despatchSelectChangeEvent: function(component,values){
        component.set("v.value", values.join(';'));
        var dataToSend = [];
        dataToSend.push({
            "label":component.get("v.label"),
            "values": values
        });
        var compEvent = component.getEvent("onchange");
        compEvent.setParams(
            { "data":dataToSend }
        );
        compEvent.fire();
    }
    
})



